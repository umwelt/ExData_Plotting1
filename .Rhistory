m = makeCacheMatrix(x)
m$get()
source('~/Developer/R/ProgrammingAssignment2/cachematrix.R')
x <- list(a = 1:4, b= rnorm(10), c = rnorm(20,1), d= rnorm(100,5))
lapply(x, mean)
x <- 1:4
lapply(x, runif)
x <- 1:400
lapply(x, runif)
x <- 1:3.14
lapply(x, runif)
lapply(x, runif, min = 100, max = 999)
lapply(x, runif, min = 100, max = 999999)
x<- matrix(rnorm(200), 20,10)
apply(x, 2, mean)
apply(x, 2, mean)
apply(x, 1, sum)
mean?
?mean
x
x(colSums)
colSums(x)
colMeans(x)
apply(x, 1, quantile, probs = c(0.25, 0.75))
set.seed(1)
rpois(5, 2)
rnorm?
?rnorm
?qpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
outcome <-read.csv("data3/outcome-of-care-measures.csvlClasses = "character"")
getwd()
outcome <-read.csv("outcome-of-care-measures.csvlClasses = "character"")
outcome <-read.csv("outcome-of-care-measures.csv colClasses = "character"")
outcome <-read.csv("outcome-of-care-measures.csv, colClasses = "character"")
outcome <-read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[,11]<- as.numeric(outcome[, 11])
outcome[,11]<- as.numeric(outcome[, 11])
hist(outcome[,11])
source('~/Developer/R/best.R')
source('~/Developer/R/rankhospital.R')
source('~/Developer/R/rankhospital.R')
source('~/Developer/R/rankall.R')
source('~/Developer/R/best.R')
source('~/Developer/R/rankhospital.R')
source('~/Developer/R/rankall.R')
source('~/Developer/R/rankall.R')
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
swirl()
library(swirl)
ls()
swirl()
getwd()
install_course_zip("swirl_courses-master.zip", multi=TRUE)
swirl()
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
10
25
2
0
3
4
summary(cars$price)
fb <- read.csv("~/Developer/R/fb.txt", header=FALSE, dec=",")
View(fb)
fb
z <- unique(fb)
z
View(z)
View(z)
writeLines(z, "finalist.txt")
writeLines(z, 'list.txt')
?writeLines
write.table(z, "finalist.txt", sep="\t")
library(xlsx)
install.packages("xlsx")
library(xlsx)
write.xlsx(z, "mxdata.xlsx")
source('~/Developer/R/ucsc.R')
install.packages("mysql")
install.packages("mysql")
install.packages("RMySQL")
install.packages("RMySQL")
source('~/Developer/R/ucsc.R')
install.packages("rmy")
source('~/Developer/R/Untitled.R')
library(rhdf5)
install.packages("rhdf5")
install_github("rhdf5")
install.packages("devtools")
require(devtools)
install_github("rhdf5")
install_github("rhdf5")
install_github("rhdf5")
install.packages("rhdf5")
install.packages("rhdf5", type="source")
install.packages('rhdf5', type='source')
library(rhdf5)
install.packages(geos, type="source")
install.packages(rgdal, type="source")
setRepositories()
install.packages("rhdf5", type="source")
install.packages("mysql")
install.packages("RMysql")
install.packages("RMySQL")
install.packages("RMySQL", type="source")
source('~/Developer/R/ucsc.R')
source('~/Developer/R/Untitled.R')
source('~/Developer/R/Untitled.R')
library(rhdf5)
created=hscreateFile("example.h5")
created=h5createFile("example.h5")
created
install.packages("~/Downloads/rmysql_0.9-3.orig.tar.gz", repos = NULL, type = "source")
source('~/Developer/R/ucsc.R')
?db
?dbConnect
source('~/Developer/R/quiz2.R')
install.packages("httpuv")
install.packages("jsonlite")
install.packages("jsonlite")
source('~/Developer/R/quiz2.R')
source('~/Developer/R/quiz2.R')
source('~/Developer/R/quiz2.R')
source('~/Developer/R/quiz2.R')
source('~/Developer/R/quiz2.R')
list
output
source('~/Developer/R/quiz2.R')
R.version.string
swirl()
library(swirl)
ls()
rm(list=ls())
getwd()
pollution <- read.csv("avgpm25.csv", colCases = c("numeric", "character", "factor", "numeric", "numeric"))
pollution <- read.csv("/avgpm25.csv", colCases = c("numeric", "character", "factor", "numeric", "numeric"))
pollution <- read.csv("avgpm25.csv", colCases = c("numeric", "character", "factor", "numeric", "numeric")) head(pollution)
pollution <- read.csv("avgpm25.csv",header = TRUE, colCases = c("numeric", "character", "factor", "numeric", "numeric"))
pollution <- read.csv("avgpm25.csv", colCases = c("numeric", "character", "factor", "numeric", "numeric"))
?read.csv
pollution <- read.csv('avgpm25.csv', header= TRUE, sep = ',', colClasses = c("numeric", "character", "factor",  "numeric", "numeric"))
head(pollution)
summary(pollution$pm25)
summary(pollution$longitude)
summary(pollution$latitude)
summary(pollution$pm25)
boxplot(pollution$pm25, col = "blue")
hist(pollution$25, col = "green")
hist(pollution$pm25, col = "green")
rug(pollution$pm25)
hist(pollution$pm25, col = "green", breaks = 100)
rugs(pollution$pm25)
rug(pollution$pm25)
hist(pollution$pm25, col = "green", breaks = 200)
boxplot(pollution$pm25, clo = 2blue)
boxplot(pollution$pm25, col = "blue")
abline(h = 12)
hist(pollution$pm25, col = "green", breaks = 100)
hist(pollution$pm25, col = "green", breaks = 100)
abline(v=12, lwd=2)
abline(v = median(polluiont$pm25), col = "magenta", lwd = 4)
abline(v = median(pollution$pm25), col = "magenta", lwd = 4)
barplot(table(pollution$region), col = "wheat", main = "NOC")
barplot(table(pollution$fips), col = "wheat", main = "NOC")
barplot(table(pollution$pm25), col = "wheat", main = "NOC")
pollution <- read.csv('avgpm25.csv', header= TRUE, sep = ',', colClasses = c("numeric", "character", "factor",  "numeric", "numeric"))
pollution
boxplot(pm$25 ~ region, data = pollution, col = "red")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(pollution, region == "east")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd =2, lty =2)
with(pollution, plot(latitude, pm25, col=region))
abline(h=12, lwd =2, lty =2)
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region=state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
po state
state
library(swirl)
ls()
library(swirl)
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
-5:20
select(cran, -(X:size))
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparision
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 AND r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA, 10))
!is.na(c(3,5,NA, 10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size: ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/ 2^20)
mutate(cran3, size_gb = size_mb/ 2^10)
mutate(cran3, size_mb = size_gb/ 2^10)
mutate(cran3, size_mb = size/ 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
ls()
rm(list=ls())
swirl()
library(tidyr)
sudents
students
?gather
gather(students, sex, count, -grade)
students2
res(students2, sex_class, count, -grade)
res<- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
?mutate
?mutate
submit()
submit()
submit()
extract_numeric(class)
extract_numeric("class")
submit()
submit()
submit()
submit()
submit()
submit()
source('/var/folders/ml/zzmv9bmd4vn247xpqc1_lxpc0000gn/T//RtmpdDt0Vg/script4.R')
submit()
submit()
students4
su
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
rbind_list(passed, failed)
sat
?separate
submit()
submit()
submit()
submit()
source('/var/folders/ml/zzmv9bmd4vn247xpqc1_lxpc0000gn/T//RtmpdDt0Vg/script8.R')
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label = TRuE)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/12")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment - > update(this_moment, now)
this_moment <- update(this_moment, now)
this_moment <-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <-update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + (hours = 15, minutes = 50)
arrive <- depart + update(depart, hours = 15, minutes = 50)
arrive <- depart + (hours = 15, minutes = 50)
arrive <- depart + hours(15)+ minutes(50)
?with_tz
with_tz(arrive, tzone= "Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive -> with_tz(arrive, "Asia/Hong_Kong")
arrive -> with_tz(arrive,tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive,tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008")
last_time <- mdy("June 17, 2008", tz =  "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
getwd()
getwd()
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url=fileUrl, destfile="idaho_housing.csv", mode="w", method="curl")
list.files(".")
idaho_housing <- read.csv("idaho_housing.csv")
head(idaho_housing)
head(idaho_housing)
head(idaho_housing)
length(idaho_housing$VAL[!is.na(idaho_housing$VAL) & idaho_housing$VAL==24])
select(idaho_housing, VAL)
head(idaho_housing)
more <- select(idaho_housing, VAL)
more
filter(more == 24)
length(idaho_housing$VAL[!is.na(idaho_housing$VAL) & idaho_housing$VAL==24])
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./data/microdata3.csv", method="curl")
DT <- fread("./data/microdata3.csv")
?par
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = n))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
?lm
R.version.string
install.packages("swirl")ù
install.packages("swirl")
library(swirl)
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, (X:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
play()
bye()
swirl()
library(swirl)
swirl()
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
getwd()
setwd("/Users/bmgh/Developer/R/ExData_Plotting1")
getwd()
